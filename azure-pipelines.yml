# Build for Angular project

trigger:
  batch: true
  branches:
    include:
    - '*'

pr:
  branches:
    include:
    - '*'

variables:
  artifactDirectory: lib
  builtLibLocation: dist/godeltech/angular-testing
  demoTestResultLocation: junit/demo
  libCoverageLocation: coverage/lib
  libSrcLocation: projects/godeltech/angular-testing
  libTestResultLocation: junit/lib
  packageName: '@godeltech/angular-testing'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build'
  variables:
    versionSuffix: ''
    currentPackageVersion: ''
  jobs:
    - job: Lib
      displayName: 'Build and test lib'
      steps:

      - task: NodeTool@0
        displayName: 'Install Node.js'
        inputs:
          versionSpec: '10.x'

      - task: Npm@1
        displayName: 'Install npm'
        inputs:
          command: 'install'

      - task: Bash@3
        displayName: 'Set version suffix'
        condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          targetType: 'inline'
          script: |
            echo "##vso[task.setvariable variable=versionSuffix]-ci-$BUILD_BUILDNUMBER"

      - task: PowerShell@2
        displayName: 'Get current version'
        condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          targetType: 'inline'
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(libSrcLocation)'
          script: |
            npm version | ConvertFrom-Json | Select-Object -ExpandProperty $(packageName) | Set-Variable -Name packageVersion
            Write-Host "##vso[task.setvariable variable=currentPackageVersion;]$packageVersion"

      - task: PowerShell@2
        displayName: 'Update version'
        condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          targetType: 'inline'
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(libSrcLocation)'
          script: |
            npm --no-git-tag-version version $(currentPackageVersion)$(versionSuffix)

      - task: Npm@1
        displayName: 'Build'
        inputs:
          command: 'custom'
          customCommand: 'run build:lib'

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Pipeline Artifac in $(artifactDirectory) directory'
        inputs:
          path: '$(System.DefaultWorkingDirectory)/$(builtLibLocation)'
          artifact: '$(artifactDirectory)'

      - task: Npm@1
        displayName: 'Test'
        inputs:
          command: 'custom'
          customCommand: 'run test:lib'

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage result'
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(libCoverageLocation)/cobertura-coverage.xml'
          failIfCoverageEmpty: true

      - task: PublishTestResults@2
        displayName: 'Publish test result'
        condition: succeededOrFailed()
        inputs:
          searchFolder: $(System.DefaultWorkingDirectory)/$(libTestResultLocation)
          testRunTitle: lib
          testResultsFormat: JUnit
          testResultsFiles: "**/TESTS*.xml"

    - job: Demo
      displayName: 'Build and test demo'
      steps:

      - task: NodeTool@0
        displayName: 'Install Node.js'
        inputs:
          versionSpec: '10.x'

      - task: Npm@1
        displayName: 'Install npm'
        inputs:
          command: 'install'

      - task: Npm@1
        displayName: 'Build'
        inputs:
          command: 'custom'
          customCommand: 'run build:demo'

      - task: Npm@1
        displayName: 'Test'
        inputs:
          command: 'custom'
          customCommand: 'run test:demo'

      - task: PublishTestResults@2
        displayName: 'Publish tests result'
        condition: succeededOrFailed()
        inputs:
          searchFolder: $(System.DefaultWorkingDirectory)/$(demoTestResultLocation)
          testRunTitle: demo
          testResultsFormat: JUnit
          testResultsFiles: "**/TESTS*.xml"

- stage: Artifacts
  displayName: 'Artifacts'
  dependsOn: Build
  jobs:
    - deployment: Publish
      displayName: 'Publish lib in artifacts'
      environment: 'Artifacts'
      strategy:
        runOnce:
          deploy:
            steps:

            - task: Npm@1
              displayName: 'Publish lib in artifacts'
              inputs:
                command: 'publish'
                workingDir: '$(Pipeline.Workspace)/$(artifactDirectory)'
                publishRegistry: 'useFeed'
                publishFeed: '19324bbd-9baf-4407-b86d-3e7f0d145399/0df141cc-6c8d-4e42-a363-89cd9c930d8e'

- stage: Npm
  displayName: 'Npm'
  dependsOn: Artifacts
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
    - deployment: Publish
      displayName: 'Publish lib in npm registry'
      environment: 'npm'
      strategy:
        runOnce:
          deploy:
            steps:

            - task: Npm@1
              displayName: 'Publish lib in npm registry'
              inputs:
                command: 'publish'
                workingDir: '$(Pipeline.Workspace)/$(artifactDirectory)'
                publishEndpoint: 'npm'